name: Deploy to Azure Container Instances

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

# Add permissions for GitHub packages
permissions:
  contents: read
  packages: write

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v2
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
      
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v1
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Build and push Docker image
      uses: docker/build-push-action@v2
      with:
        context: .
        push: true
        tags: |
          ghcr.io/${{ github.repository }}:${{ github.sha }}
          ghcr.io/${{ github.repository }}:latest
          
    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    - name: Register Microsoft.ContainerInstance provider
      run: |
        echo "Checking if Microsoft.ContainerInstance provider is registered..."
        REGISTRATION_STATE=$(az provider show -n Microsoft.ContainerInstance --query "registrationState" -o tsv)
        if [ "$REGISTRATION_STATE" != "Registered" ]; then
          echo "Registering Microsoft.ContainerInstance provider..."
          az provider register --namespace Microsoft.ContainerInstance
          echo "Waiting for registration to complete (this may take a few minutes)..."
          while [ "$(az provider show -n Microsoft.ContainerInstance --query "registrationState" -o tsv)" != "Registered" ]
          do
            echo "Still registering... waiting 30 seconds"
            sleep 30
          done
          echo "Microsoft.ContainerInstance provider registered successfully!"
        else
          echo "Microsoft.ContainerInstance provider is already registered."
        fi
        
    - name: Delete existing container if it exists
      continue-on-error: true
      run: |
        az container delete --resource-group rustegrate-rg --name rustegrate-container --yes
        
    - name: Deploy to Azure Container Instances
      run: |
        az container create \
          --resource-group rustegrate-rg \
          --name rustegrate-container \
          --image ghcr.io/${{ github.repository }}:${{ github.sha }} \
          --dns-name-label rustegrate-api \
          --ports 8080 \
          --protocol TCP \
          --environment-variables HOST=0.0.0.0 PORT=8080 LOG_LEVEL=info \
          --registry-login-server ghcr.io \
          --registry-username ${{ github.repository_owner }} \
          --registry-password ${{ secrets.GITHUB_TOKEN }} \
          --restart-policy OnFailure
          
    - name: Azure logout
      run: |
        az logout 